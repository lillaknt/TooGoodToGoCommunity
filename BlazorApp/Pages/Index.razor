@page "/"
@using System.Security.Claims
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject NavigationManager NavigationManager
@inject IUserService UserService

@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Index</PageTitle>

<AuthorizeView>
    <NotAuthorized>

        <h1>Test Website: Too Good To Go - Community</h1>
        <RadzenButton Text="Create User" Click=@NavigateToCreateUser />
        <button @onclick="NavigateToCreateUser" class="btn btn-primary">Create User</button>
        <button @onclick="NavigateToLogin" class="btn btn-primary">Login</button>
    </NotAuthorized>
    <Authorized>
@if (user != null){
    <div class="card">
        <h3>Hello, @user.FirstName</h3>
        <p>Welcome to Too Good To Go - Community</p>
    </div>
}
    </Authorized>
</AuthorizeView>


@code {
    
    private User user;
    private string email; // Declare email as a field
    protected override async Task OnInitializedAsync()
    {
    // Access the user's email from the authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        email = authenticationState.User.FindFirstValue(ClaimTypes.Email);

        try
        {
    // Retrieve user details using the GetAsync method
            var users = await UserService.GetAsync(email);
            user = users.FirstOrDefault(); // Assuming you're expecting a single user
        }
        catch (Exception ex)
        {
    // Handle exceptions
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void NavigateToCreateUser()
    {
    // Use NavigationManager to navigate to the CreateUser page
        NavigationManager.NavigateTo("/CreateUser");
    }

    private void NavigateToLogin()
    {
    // Use NavigationManager to navigate to the CreateUser page
        NavigationManager.NavigateTo("/Login");
    }

}
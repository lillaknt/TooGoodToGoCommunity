@page "/CreatePost"
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.DTOs
@attribute [Authorize] 
@inject IPostService postService
@inject NavigationManager navMgr

<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
    </div>
    <div class="form-group field">
        <label>Description:</label>
        <input type="text" @bind="postDescription"/>
    </div>
    <div class="form-group field">
        <label>Price:</label>
        <input type="text" @bind="postPrice"/>
    </div>
    <div class="form-group field">
        <label>Picture:</label>
        <InputFile OnChange="HandleFileUpload"/>
    </div>

    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <button @onclick="Create" class="acceptbtn">Create</button>
    </div>

</div>

@code {

    //getting our logegd in user info
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private int userId;
    //private string? postalCode;
    //private string? name;

    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;
    //postalCode = user.FindFirst(ClaimTypes.PostalCode)?.Value;
    // name = user.Identity!.Name!;

    //retrieve user ID and convert it to id
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);

        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var parsedUserId))
        {
            userId = parsedUserId;
        }
        else
        {
            userId = 0; // Set a default value or handle it in a way that makes sense for your application
            msg = "Unable to retrieve user ID from authentication.";
        }
    }


    private string postTitle = "";
    private string postDescription = "";
    private decimal postPrice;
    private byte[]? imageData;
    private string msg = "";


    private async Task Create()
    {
        msg = "";

        try
        {
    // Check if the imageData contains file data
            if (imageData == null || imageData.Length == 0)
            {
                msg = "Please select an image.";
                return;
            }

            PostCreationDto dto = new(postTitle, postDescription, postPrice, imageData, userId);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();

        if (file != null)
        {
            await using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            imageData = memoryStream.ToArray();
        }
    }


}
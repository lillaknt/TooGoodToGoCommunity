@page "/UserProfile"
@using System.Security.Claims
@using HttpClients.ClientInterfaces
@inject NavigationManager navMgr
@inject IAuthService authService
<!-- this page is only displayed when logged in -->
<!-- this page is an example on how to get our logged in user information when we only need to show it in the HTML -->
<PageTitle>User Profile</PageTitle>
<div class="top-bar-nav">
    <TopBar Title="Account Details"/>
</div>
    
    

   <div class="container profile-container">
       <h2>User Profile</h2>
   
       <AuthorizeView>
           <Authorized>
               <div class="user-info">
                   <h3>Hello, @context.User.Identity.Name!</h3>
                   <p>Email: @context.User.Claims.First(claim => claim.Type.Equals(ClaimTypes.Email)).Value</p>
                   <p>Postal Code: @context.User.Claims.First(claim => claim.Type.Equals(ClaimTypes.PostalCode)).Value</p>
               </div>
   
               <div class="button-container">
                   <button class="button-primary" @onclick="() => NavigateToLogin()">Edit</button>
                   <button class="button-primary" @onclick="() => Logout()">Logout</button>
               </div>
           </Authorized>
           <NotAuthorized>
               <div class="button-container">
                   <h6>Please login to access your profile</h6>
                   <button class="button-primary" @onclick="() => NavigateToLogin()">Login</button>
               </div>
           </NotAuthorized>
       </AuthorizeView>
   </div>

@code {
    private void NavigateToLogin()
    {
        navMgr.NavigateTo("/Login");
    }
    
    private async Task Logout()
    {
        await authService.LogoutAsync();
        navMgr.NavigateTo("/");
    }
}
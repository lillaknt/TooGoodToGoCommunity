@page "/EditPost/{id:int}"
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager Navigation


<h3>EditPost</h3>

<div class="card">
    @if (dto == null)
    {
        <label>Loading Post data..</label>
    }
    else
    {
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="dto.Title"/>
        </div>
        <div class="form-group field">
            <label>Image:</label>
            <InputFile OnChange="HandleFileChange"/>
        </div>
        <div class="form-group field">
            <label>Description:</label>
            <input type="text" @bind="dto.Description"/>
        </div>
        <div class="form-group field">
            <label>Price:</label>
            <input type="text" @bind="dto.Price"/>
        </div>

        <div class="button-row">
            <button @onclick="UpdateAsync" class="acceptbtn">Update</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(msg))
    {
        <label style="color: red">@msg</label>
    }
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    public int UserId { get; set; }

    private PostUpdateDto dto = null!;
    private string msg = "";
    private byte[]? imageData;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            var updatedPost = await postService.GetByIdAsync(Id, UserId);

            dto = new PostUpdateDto(Id, UserId)

            {
                Title = updatedPost.Title,
                Description = updatedPost.Description,
                Price = updatedPost.Price
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task UpdateAsync()
    {
        try
        {
    // Check if the imageData contains file data
            if (imageData == null || imageData.Length == 0)
            {
                msg = "Please select an image.";
                return;
            }

            dto.ImageData = imageData;
            await postService.UpdateAsync(dto); //handover to the dto in IPostService
            Navigation.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();

        if (file != null)
        {
            await using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            imageData = memoryStream.ToArray();
        }
    }

}
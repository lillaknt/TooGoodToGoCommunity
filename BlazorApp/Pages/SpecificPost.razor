@page "/SpecificPost/{postId:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.WebUtilities
@using Domain.DTOs
@using System.Security.Claims
@inject IPostService postService
@inject IUserService UserService
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Specific Post</PageTitle>

@if (post != null)
{
    <div class="top-bar-nav">
        <TopBar Title=@post.Title/>
    </div>


    <section class="scroll-container">
        <div class="postCard">
            <img src="@($"data:image/png;base64,{Convert.ToBase64String(post.ImageData)}")" alt="Post Image" class="card-image"/>
            <div class="card-details">
                <div class="title-section">
                    <p class="card-title">@post.Title</p>
                    @if (!string.IsNullOrEmpty(date))
                    {
                        <p class="card-date">@date</p>
                    }
                </div>
                <div class="info-section">
                    @if (!string.IsNullOrEmpty(distance))
                    {
                        <p class="pard-distance">@distance</p>
                    }
                    <p class="card-price">@post.Price kr.</p>


                </div>

                <p class="card-description">@post.Description</p>
            </div>
        </div>
        <AuthorizeView>
            <NotAuthorized>

                <div class="button-container">
                    <h6>Please login to buy item</h6>
                    <button class="button-primary" @onclick="() => NavigateToLogin()">Login</button>
                </div>

            </NotAuthorized>
            <Authorized>

         <div class="button-container">
                    @if (isLoggedIn && post.User != null && post.User.Id.ToString() == id)
                    {
                        <button class="button-primary" @onclick="() => EditButton(postId)">Edit</button>
                        <button class="button-primary" @onclick="() => RemoveTodo(postId)">Delete</button>
                    }
                    else
                    {
                        <button class="button-primary" @onclick="BuyButton">Buy</button>
                    }
                </div>


            </Authorized>
        </AuthorizeView>

    </section>
}

@code {

    [Parameter]
    public int postId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? id;
    private bool isLoggedIn;
    private User user;//BUY BUTTON
    private string email; //BUY BUTTON
    private Post post;
    private IEnumerable<Post> posts;
    private string msg = "";
    private string date;
    private string distance;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync(); //BUY BUTTON
        email = authenticationState.User.FindFirstValue(ClaimTypes.Email);
        await UpdateAuthenticationState();
        
        try
        {
            
            var idDto = new GetPostIdDto();
            idDto.SetId(postId);
            await GetPostAsync(idDto);
    // Retrieve date and distance from query parameters
            var uri = new Uri(Navigation.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);
            date = queryParams["date"];
            distance = queryParams["distance"];

    // Now you can use the 'date' and 'distance' values as needed
            
            var users = await UserService.GetAsync(email);//BUY BUTTON
            user = users.FirstOrDefault(); //BUY BUTTON
        }
        catch (Exception ex)
        {
            LogException(ex);
        }
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthState;
        var user = authState.User;
        isLoggedIn = user.Identity != null;

        if (isLoggedIn)
        {
            id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateAuthenticationState();
    }

    private async Task GetPostAsync(GetPostIdDto idDto)
    {
        try
        {
            posts = await postService.GetId(idDto);
            post = posts.First();
        }
        catch (Exception ex)
        {
            LogException(ex);
            throw;
        }
    }

    private void EditButton(int postId)
    {
        Navigation.NavigateTo($"EditPost/{postId}");
    }

    private async Task RemoveTodo(int postId)
    {
        msg = "";
        try
        {
            await postService.DeleteAsync(postId);

            var list = new List<Post>(posts!);
            list.RemoveAll(p => p.Id == postId);
            posts = list.AsEnumerable();
        }
        catch (Exception ex)
        {
            LogException(ex);
            msg = ex.Message;
        }
        Navigation.NavigateTo("/ViewPosts");
    }

    private void LogException(Exception ex)
    {
    // Log exception details using your preferred logging mechanism
        Console.WriteLine(ex);
    }
    
    private async Task BuyButton()
    {
        try
        {
    // Check if the user is authenticated
            if (isLoggedIn)
            {
    // Update the user's profile to add one to ItemsPurchased
                await UserService.UpdateUserAsync(new UserUpdateDto { Email = email,
                    ItemsPurchased = (user.ItemsPurchased ?? 0) + 1,
                    CO2Saved = Math.Round(((user.ItemsPurchased ?? 0) + 1) * 0.05, 2)});
                
               
                Navigation.NavigateTo("/UserProfile", forceLoad: true);

   

    // Display a success message or perform additional actions
                Console.WriteLine("Product purchased successfully!");
            }
        }
        catch (Exception ex)
        {
    // Handle exceptions
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/Login");
    }

}
@page "/SpecificPost/{postId:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@inject IPostService postService
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation


<h3>SpecificPost</h3>
<div class="postCard">
    
     @if (post != null)
     {
         <p id="TitlePost">Title:@post.Title</p>
         <p id="DescriptionPost">Post Description: @post.Description</p>
         <p id="PricePost">Price: @post.Price kr.</p>  
         <p id="UserId">User ID: @post.User.Id</p>  
        
         @if (post.ImageData != null && post.ImageData.Length > 0)
         {
             <img src="@($"data:image/png;base64,{Convert.ToBase64String(post.ImageData)}")" alt="Post Image" width="200" height="150" />
         }
        
        
                                      
         <div class="button-container">
          
<button class="buttons" @onclick="() => EditButton(postId)">Edit</button>

             <button class="buttons" @onclick="() => RemoveTodo(postId)">Delete</button>
         </div>                            
     }
</div>
@code {
     
    [Parameter] public int postId { get; set; }

    private Post post;
    private IEnumerable<Post> posts;
    private string msg = "";
    
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {

            GetPostIdDto idDto = new GetPostIdDto();
            idDto.SetId(postId);
            await GetAsync(idDto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    

    private async Task GetAsync(GetPostIdDto id)
    {
        try
        {
            posts = await postService.GetId(id);
            post = posts.First();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private void EditButton(int id)
    {
        Navigation.NavigateTo($"EditPost/{id}");
    }
    
    
    private async Task RemoveTodo(int id)
    {
        msg = "";
        try
        {
            await postService.DeleteAsync(id);
        
            var list = new List<Post>(posts!);
            list.RemoveAll(post => post.Id == id);
            posts = list.AsEnumerable();
         
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        Navigation.NavigateTo("/ViewPosts");
    }
    
}